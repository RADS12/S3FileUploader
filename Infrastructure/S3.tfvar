############################
# API infra (EC2/ECS app)  #
############################

terraform {
  required_version = ">= 1.6.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.0"
    }
  }
}

################
# Variables
################
variable "region" {
  description = "AWS region"
  type        = string
  default     = "us-east-2"
}

variable "bucket_name" {
  description = "Globally-unique S3 bucket name for uploads"
  type        = string
  default     = "rad-s3-demo-first-1"
}

variable "tags" {
  description = "Common tags"
  type        = map(string)
  default     = {
    Project = "file-uploader-api"
    Owner   = "rad"
    Env     = "dev"
  }
}

provider "aws" {
  region = var.region
}

################
# S3 bucket
################
resource "aws_s3_bucket" "uploads" {
  bucket = var.bucket_name
  tags   = var.tags
}

# Block all public access (recommended)
resource "aws_s3_bucket_public_access_block" "uploads" {
  bucket                  = aws_s3_bucket.uploads.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

################
# IAM for API compute (EC2 or ECS task)
################

# Trust EC2 *and* ECS tasks (use whichever you deploy)
data "aws_iam_policy_document" "assume_role" {
  statement {
    effect = "Allow"
    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com", "ecs-tasks.amazonaws.com"]
    }
    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "api_role" {
  name               = "FileUploaderApiRole"
  assume_role_policy = data.aws_iam_policy_document.assume_role.json
  tags               = var.tags
}

# S3 access: Put/Get/Delete objects in this bucket + List at bucket level
data "aws_iam_policy_document" "s3_rw" {
  statement {
    sid     = "ListBucket"
    effect  = "Allow"
    actions = ["s3:ListBucket"]
    resources = [
      aws_s3_bucket.uploads.arn
    ]
  }

  statement {
    sid     = "ObjectRW"
    effect  = "Allow"
    actions = [
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject"
    ]
    resources = [
      "${aws_s3_bucket.uploads.arn}/*"
    ]
  }
}

resource "aws_iam_policy" "s3_rw" {
  name   = "FileUploaderApiS3RW"
  policy = data.aws_iam_policy_document.s3_rw.json
  tags   = var.tags
}

resource "aws_iam_role_policy_attachment" "attach_s3_rw" {
  role       = aws_iam_role.api_role.name
  policy_arn = aws_iam_policy.s3_rw.arn
}

################
# (Optional) EC2 instance profile (use if deploying on EC2)
################
resource "aws_iam_instance_profile" "api_instance_profile" {
  name = "FileUploaderApiInstanceProfile"
  role = aws_iam_role.api_role.name
  tags = var.tags
}

################
# Outputs
################
output "bucket_name" {
  value = aws_s3_bucket.uploads.bucket
}

output "bucket_arn" {
  value = aws_s3_bucket.uploads.arn
}

output "api_role_arn" {
  value = aws_iam_role.api_role.arn
}

output "ec2_instance_profile_name" {
  value = aws_iam_instance_profile.api_instance_profile.name
}
